---
export interface Props {
  episode: number;
  emitted: boolean;
  date: string;
  videoID: string;
}

const { episode, emitted, date, videoID } = Astro.props;
const miniaturaURL = `https://i.ytimg.com/vi/${videoID}/hqdefault.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&rs=AOn4CLADWCUiPN6aU2t0lMpdzvf4dIVgHg`;
const defaultMiniaturaURL =
  "https://i.ytimg.com/vi/nIht_eGAaH4/hqdefault.jpg?sqp=-oaymwEcCPYBEIoBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&rs=AOn4CLB2i1S59njuc4Wkug_DL35hp6naYg";
---

{
  emitted ? (
    <li>
      <a href={`https://www.youtube.com/watch?v=${videoID}`} target="_blank">
        <div
          style={`background-image: url(${miniaturaURL})`}
          id="bg"
          class="bg"
        />
        <div class="hover-animation">
          <svg viewBox="0 0 16 16">
            <path d="m11.596 8.697-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 0 1 0 1.393z" />
          </svg>
        </div>
      </a>
    </li>
  ) : (
    <li>
      <a
        href={`https://www.youtube.com/${
          videoID ? `watch?v=${videoID}` : "@DiferenteRave."
        }`}
        target="_blank"
      >
        <div
          style={`background-image: url(${
            videoID ? miniaturaURL : defaultMiniaturaURL
          });`}
          class="bg opacity"
        />
        <span id="counter" prop-date={date}>
          00D:00H:00M:00S
        </span>
        <div class="hover-animation">
          <svg viewBox="0 0 16 16">
            <path d="m11.596 8.697-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 0 1 0 1.393z" />
          </svg>
        </div>
      </a>
    </li>
  )
}

<style>
  li {
    width: 100%;
    height: 0;
    padding-bottom: 56.25%;
    background-color: black;
    border-radius: 5px;
    transition: transform 0.25s ease-out;
    overflow: hidden;
  }

  a {
    position: relative;
  }

  div.bg {
    width: 100%;
    aspect-ratio: 16/9;
    background-size: cover;
    background-position: center;
  }

  span {
    width: 55%;
    height: 25%;
    /* background-color: #5316e1; */
    background-image: linear-gradient(50deg, #512aae 45%, #00ffff 100%);
    border-radius: 5px;
    position: absolute;
    display: flex;
    justify-content: center;
    align-items: center;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) skewY(-5deg);
    font-weight: 800;
    font-size: 0;
    color: #fff;
    text-shadow: 0 0 10px #000;
  }

  div.hover-animation {
    width: 100%;
    aspect-ratio: 16/9;
    background-image: linear-gradient(
      0deg,
      rgba(0, 255, 255, 0.3) 0%,
      transparent 95%
    );
    position: absolute;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: transform 0.25s ease-out;
  }

  svg {
    height: 30%;
    fill: #fff;
    filter: drop-shadow(2px 2px 5px rgba(0, 0, 0, 0.5));
    transform: translateY(100%);
    transition: transform 0.25s ease-out 0.1s;
  }

  .opacity {
    opacity: 0.25;
  }

  /* HOVER */

  @media (hover: hover) {
    li:hover {
      transform: scale(1.025);
    }

    a:hover > div.hover-animation {
      transform: translateY(-100%);
    }

    a:hover > div.hover-animation > svg {
      transform: translateY(0%);
    }
  }
</style>

<script>
  import { countDown } from "../services/countdown";
  const counter = document.getElementById("counter");
  const main = counter.parentElement.parentElement;
  const opacityDiv = main.children[0].children[0];
  const date = counter.getAttribute("prop-date");

  const width = main.clientWidth;
  const fontSize = (5.4 / 100) * width;
  counter.style.fontSize = `${fontSize}px`;

  window.addEventListener("resize", () => {
    const width = main.clientWidth;
    const fontSize = (5.4 / 100) * width;
    counter.style.fontSize = `${fontSize}px`;
  });

  function handleEndCounter() {
    counter.remove();
    opacityDiv.classList.remove("opacity");
  }

  countDown(date, counter, handleEndCounter);
</script>
